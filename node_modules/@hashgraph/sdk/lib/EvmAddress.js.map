{"version":3,"file":"EvmAddress.js","sources":["../src/EvmAddress.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Key from \"./Key.js\";\nimport * as hex from \"./encoding/hex.js\";\nimport { arrayEqual } from \"./util.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.IKey} HieroProto.proto.IKey\n */\n\n/**\n * @typedef {import(\"./client/Client.js\").default<*, *>} Client\n */\n\n/**\n *  Represents an Ethereum Virtual Machine (EVM) address.\n * This class extends the Key class and provides functionality for handling EVM addresses.\n */\nexport default class EvmAddress extends Key {\n    /**\n     * @internal\n     * @param {Uint8Array} bytes\n     */\n    constructor(bytes) {\n        super();\n        this._bytes = bytes;\n    }\n\n    /**\n     * @param {string} text\n     * @returns {EvmAddress}\n     */\n    static fromString(text) {\n        return new EvmAddress(hex.decode(text));\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {EvmAddress}\n     */\n    static fromBytes(bytes) {\n        return new EvmAddress(bytes);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return this._bytes;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return hex.encode(this._bytes);\n    }\n\n    /**\n     * @param {EvmAddress} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        return arrayEqual(this._bytes, other._bytes);\n    }\n}\n"],"names":["EvmAddress","Key","constructor","bytes","super","this","_bytes","fromString","text","hex.decode","fromBytes","toBytes","toString","hex.encode","equals","other","arrayEqual"],"mappings":"sHAmBe,MAAMA,UAAmBC,EAKpC,WAAAC,CAAYC,GACRC,QACAC,KAAKC,OAASH,CACtB,CAMI,iBAAOI,CAAWC,GACd,OAAO,IAAIR,EAAWS,EAAWD,GACzC,CAMI,gBAAOE,CAAUP,GACb,OAAO,IAAIH,EAAWG,EAC9B,CAKI,OAAAQ,GACI,OAAON,KAAKC,MACpB,CAKI,QAAAM,GACI,OAAOC,EAAWR,KAAKC,OAC/B,CAMI,MAAAQ,CAAOC,GACH,OAAOC,EAAWX,KAAKC,OAAQS,EAAMT,OAC7C"}