import t from"../ReceiptStatusError.js";import e from"../Status.js";import r from"./TransactionReceiptQuery.js";import s from"./TransactionRecordQuery.js";import n from"../account/AccountId.js";import i from"./TransactionId.js";import{decode as a,encode as c}from"../encoding/hex.js";class o{constructor(t){this.nodeId=t.nodeId,this.transactionHash=t.transactionHash,this.transactionId=t.transactionId,Object.freeze(this)}static fromJSON(t){return new o({nodeId:n.fromString(t.nodeId),transactionHash:a(t.transactionHash),transactionId:i.fromString(t.transactionId)})}async getReceipt(r){const s=await this.getReceiptQuery().execute(r);if(s.status!==e.Success&&s.status!==e.FeeScheduleFilePartUploaded)throw new t({transactionReceipt:s,status:s.status,transactionId:this.transactionId});return s}async getRecord(t){return await this.getReceipt(t),this.getRecordQuery().execute(t)}async getVerboseRecord(t){try{return await this.getReceiptQuery().execute(t),this.getRecordQuery().execute(t)}catch(e){return this.getRecordQuery().execute(t)}}async getReceiptWithSigner(r){const s=await this.getReceiptQuery().executeWithSigner(r);if(s.status!==e.Success)throw new t({transactionReceipt:s,status:s.status,transactionId:this.transactionId});return s}async getRecordWithSigner(t){return await this.getReceiptWithSigner(t),this.getRecordQuery().executeWithSigner(t)}getReceiptQuery(){return(new r).setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId])}getRecordQuery(){return(new s).setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId])}toJSON(){return{nodeId:this.nodeId.toString(),transactionHash:c(this.transactionHash),transactionId:this.transactionId.toString()}}toString(){return JSON.stringify(this.toJSON())}}export{o as default};
//# sourceMappingURL=TransactionResponse.js.map
