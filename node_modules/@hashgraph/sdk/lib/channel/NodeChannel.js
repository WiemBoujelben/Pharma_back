import e from"tls";import{credentials as t,Client as r}from"@grpc/grpc-js";import i from"./Channel.js";import s from"../grpc/GrpcServiceError.js";import n from"../grpc/GrpcStatus.js";import{ALL_NETWORK_IPS as o}from"../constants/ClientConstants.js";const c={};class a extends i{constructor(e,t){super(),this._client=null,this.address=e,this.maxExecutionTime=t;const{ip:r,port:i}=this.parseAddress(e);this.nodeIp=r,this.nodePort=i}bytesToPem(e){const t=e.toString("base64");return`-----BEGIN CERTIFICATE-----\n${t.match(/.{1,64}/g)?.join("\n")||""}\n-----END CERTIFICATE-----`}parseAddress(e){const[t,r]=e.split(":");if(!t||!r)throw new Error("Invalid address format. Expected format: 'IP:Port'");return{ip:t,port:r}}async _retrieveCertificate(){return new Promise(((t,r)=>{const i=e.connect({host:this.nodeIp,port:Number(this.nodePort),rejectUnauthorized:!1},(()=>{try{const e=i.getPeerCertificate();e&&e.raw?t(this.bytesToPem(e.raw)):r(new Error("No certificate retrieved."))}catch(e){r(e)}finally{i.end()}}));i.on("error",r)}))}async _initializeClient(){if(c[this.address])return void(this._client=c[this.address]);let e;if("50212"===this.nodePort){const r=Buffer.from(await this._retrieveCertificate());e=t.createSsl(r)}else e=t.createInsecure();this._client=new r(this.address,e,{"grpc.ssl_target_name_override":"127.0.0.1","grpc.default_authority":"127.0.0.1","grpc.http_connect_creds":"0","grpc.keepalive_time_ms":1e5,"grpc.keepalive_timeout_ms":1e4,"grpc.keepalive_permit_without_calls":1,"grpc.enable_retries":0}),c[this.address]=this._client}close(){this._client&&(this._client.close(),delete c[this.address])}_createUnaryClient(e){return(t,r,i)=>{this._initializeClient().then((()=>{const c=new Date,a=this.maxExecutionTime?this.maxExecutionTime:1e4;c.setMilliseconds(c.getMilliseconds()+a),this._client?.waitForReady(c,(c=>{c?i(new s(n.Timeout,o[`${this.nodeIp}:`])):this._client?.makeUnaryRequest(`/proto.${e}/${t.name}`,(e=>e),(e=>e),Buffer.from(r),((e,t)=>{i(e,t)}))}))})).catch((e=>{e instanceof Error?i(e):i(new Error("An unexpected error occurred"))}))}}}export{a as default};
//# sourceMappingURL=NodeChannel.js.map
