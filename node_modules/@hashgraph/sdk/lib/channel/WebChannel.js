import{ALL_WEB_NETWORK_NODES as t}from"../constants/ClientConstants.js";import r from"../grpc/GrpcServiceError.js";import s from"../grpc/GrpcStatus.js";import e from"../http/HttpError.js";import a from"../http/HttpStatus.js";import o,{encodeRequest as n,decodeUnaryResponse as p}from"./Channel.js";class c extends o{constructor(t){super(),this._address=t}close(){}_createUnaryClient(o){return async(c,l,i)=>{try{const m=await fetch(`${this._address}/proto.${o}/${c.name}`,{method:"POST",headers:{"content-type":"application/grpc-web+proto","x-user-agent":"hedera-sdk-js/v2","x-grpc-web":"1"},body:n(l)});if(!m.ok){i(new e(a._fromValue(m.status)),null)}const u=m.headers.get("grpc-status"),d=m.headers.get("grpc-message");if(null!=u&&null!=d){const e=new r(s._fromValue(parseInt(u)),t[this._address].toString());e.message=d,i(e,null)}const f=await m.arrayBuffer();i(null,p(f))}catch(e){i(new r(s._fromValue(18),t[this._address].toString()),null)}}}}export{c as default};
//# sourceMappingURL=WebChannel.js.map
